# scalar.opt contains Optgen language definitions for all of Cockroach's
# physical and logical operators that return a single result value having a
# simple scalar type like string or float, rather than a table-valued type.
#
# Tags
#
# Scalar - All operators in this file are marked with the Scalar tag, so they
#          can be easily distinguished from Relational and Enforcer operators.

# Subquery is a subquery in a single-row context. Here are some examples:
#
#   SELECT 1 = (SELECT 1)
#   SELECT (1, 'a') = (SELECT 1, 'a')`
#
# In a single-row context, the outer query is only valid if the subquery returns
# at most one row. Subqueries in a multi-row context can be transformed to a
# single row context using the Any operator. See the comment above the Any
# operator for more details.
#
# The Input field contains the subquery itself, which should be wrapped in a
# Max1Row operator to enforce that the subquery can return at most one row
# (Max1Row may be removed by the optimizer later if it can determine statically
# that the subquery will always return at most one row). In addition, the
# subquery must project exactly one output column. If the subquery returns one
# row, then that column is bound to the single column value in that row. If the
# subquery returns zero rows, then that column is bound to NULL.
[Scalar]
define Subquery {
    Input   RelNode

    _ SubqueryPrivate
}

# SubqueryPrivate contains information related to a subquery (Subquery, Any,
# Exists).
[Private]
define SubqueryPrivate {
	OriginalExpr Subquery

	# Cmp is only used for AnyOp.
	Cmp          Operator
}

# Any is a SQL operator that applies a comparison to every row of an input
# subquery and returns true if any of the comparisons are true, else returns
# null if any of the comparisons are null, else returns false. The following
# transformations map from various SQL operators into the Any operator:
#
#   <scalar> IN (<subquery>)
#   ==> (Any <subquery> <scalar> EqOp)
#
#   <scalar> NOT IN (<subquery>)
#   ==> (Not (Any <subquery> <scalar> EqOp))
#
#   <scalar> <cmp> {SOME|ANY}(<subquery>)
#   ==> (Any <subquery> <scalar> <cmp>)
#
#   <scalar> <cmp> ALL(<subquery>)
#   ==> (Not (Any <subquery> <scalar> <negated-cmp>))
#
# Any expects the input subquery to return a single column of any data type. The
# scalar value is compared with that column using the specified comparison
# operator.
[Scalar]
define Any {
    Input   RelNode
    Scalar  ScalarExpr

    _ SubqueryPrivate
}

# Exists takes a relational query as its input, and evaluates to true if the
# query returns at least one row.
[Scalar]
define Exists {
    Input   RelNode

    _ SubqueryPrivate
}

# Variable is the typed scalar value of a column in the query. The private
# field is a Metadata.ColumnID that references the column by index.
[Scalar]
define Variable {
    Col ColumnID
}

# Const is a typed scalar constant value. The private field is a tree.Datum
# value having any datum type that's legal in the expression's context.
[Scalar, ConstValue]
define Const {
    Value Datum
}

# Null is the constant SQL null value that has "unknown value" semantics. If
# the Typ field is not types.Unknown, then the value is known to be in the
# domain of that type. This is important for preserving correct types in
# replacement patterns. For example:
#   (Plus (Function ...) (Const 1))
#
# If the function in that expression has a static type of Int, but then it gets
# constant folded to (Null), then its type must remain as Int. Any other type
# violates logical equivalence of the expression, breaking type inference and
# possibly changing the results of execution. The solution is to tag the null
# with the correct type:
#   (Plus (Null (Int)) (Const 1))
#
# Null is its own operator rather than a Const datum in order to make matching
# and replacement easier and more efficient, as patterns can contain (Null)
# expressions.
[Scalar, ConstValue]
define Null {
    Typ DatumType
}

# True is the boolean true value that is equivalent to the tree.DBoolTrue datum
# value. It is a separate operator to make matching and replacement simpler and
# more efficient, as patterns can contain (True) expressions.
[Scalar, Boolean, ConstValue]
define True {
}

# False is the boolean false value that is equivalent to the tree.DBoolFalse
# datum value. It is a separate operator to make matching and replacement
# simpler and more efficient, as patterns can contain (False) expressions.
[Scalar, Boolean, ConstValue]
define False {
}

[Scalar]
define Placeholder {
    Value TypedExpr
}

[Scalar]
define Tuple {
    Elems ScalarListExpr
    Typ   DatumType
}

# Projections is a set of typed scalar expressions that will become output
# columns for a containing Project operator. 
#
# The private Defs field contains the list of column indexes returned by each
# expression, and a list of pass-through columns.
#
# Elems cannot contain a simple VariableOp with the same ColumnID as the
# synthesized column (in Def.SynthesizedCols); that is a pass-through column.
# Elems can contain a VariableOp when a new ColumnID is being assigned, such as
# in the case of an outer column reference.
[Scalar, List]
define Projections {
}

[Scalar, ListItem]
define ProjectionsItem {
    Element ScalarExpr

    _ ColPrivate
}

[Private]
define ColPrivate {
    Col ColumnID

    # Lazily populated.
    scalar ScalarProps
}

# Aggregations is a set of aggregate expressions that will become output columns
# for a containing GroupBy operator. The expressions can only consist of
# aggregate functions, variable references, and modifiers like AggDistinct.
# Examples of valid expressions:
#   (Min (Variable 1))
#   (Count (AggDistinct (Variable 1)))
#
# More complex arguments must be formulated using a Project operator as input to
# the GroupBy operator.
#
# The private Cols field contains the list of column indexes returned by the
# expression, as an opt.ColList. It is legal for Cols to be empty.
[Scalar, List]
define Aggregations {
}

[Scalar, ListItem]
define AggregationsItem {
    Agg ScalarExpr

    _ ColPrivate
}

# Filters is a boolean And operator that only appears as the Filters child of
# a Select operator, or the On child of a Join operator. For example:
#   (Select
#     (Scan a)
#     (Filters (Gt (Variable a) 1) (Lt (Variable a) 5))
#   )
#
# Normalization rules ensure that a Filters expression is always created if
# there is at least one condition, so that other rules can rely on its presence
# when matching, even in the case where there is only one condition. The
# semantics of the Filters operator are identical to those of the And operator.
[Scalar, Boolean, List]
define Filters {
}

[Scalar, Boolean, ListItem]
define FiltersItem {
    Condition ScalarExpr

    scalar ScalarProps
}

# And is the boolean conjunction operator that evalutes to true if all of its
# conditions evaluate to true. If the conditions list is empty, it evalutes to
# true.
[Scalar, Boolean]
define And {
    Left  ScalarExpr
    Right ScalarExpr
}

# Or is the boolean disjunction operator that evalutes to true if any of its
# conditions evaluate to true. If the conditions list is empty, it evaluates to
# false.
[Scalar, Boolean]
define Or {
    Left  ScalarExpr
    Right ScalarExpr
}

# Not is the boolean negation operator that evaluates to true if its input
# evalutes to false.
[Scalar, Boolean]
define Not {
    Input ScalarExpr
}

[Scalar, Comparison]
define Eq {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define Lt {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define Gt {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define Le {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define Ge {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define Ne {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define In {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define NotIn {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define Like {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define NotLike {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define ILike {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define NotILike {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define SimilarTo {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define NotSimilarTo {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define RegMatch {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define NotRegMatch {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define RegIMatch {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define NotRegIMatch {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define Is {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define IsNot {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define Contains {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define JsonExists {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define JsonAllExists {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Comparison]
define JsonSomeExists {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar]
define AnyScalar {
   Left  ScalarExpr
   Right ScalarExpr

   Cmp   Operator
}

[Scalar, Binary]
define Bitand {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Binary]
define Bitor {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Binary]
define Bitxor {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Binary]
define Plus {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Binary]
define Minus {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Binary]
define Mult {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Binary]
define Div {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Binary]
define FloorDiv {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Binary]
define Mod {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Binary]
define Pow {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Binary]
define Concat {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Binary]
define LShift {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Binary]
define RShift {
   Left  ScalarExpr
   Right ScalarExpr
}

[Scalar, Binary]
define FetchVal {
   Json  ScalarExpr
   Index ScalarExpr
}

[Scalar, Binary]
define FetchText {
   Json  ScalarExpr
   Index ScalarExpr
}

[Scalar, Binary]
define FetchValPath {
   Json ScalarExpr
   Path ScalarExpr
}

[Scalar, Binary]
define FetchTextPath {
   Json ScalarExpr
   Path ScalarExpr
}

[Scalar, Unary]
define UnaryMinus {
    Input ScalarExpr
}

[Scalar, Unary]
define UnaryComplement {
    Input ScalarExpr
}

# Cast converts the input expression into an expression of the target type.
# While the input's type is restricted to the datum types in the types package,
# the target type can be any of the column types in the coltypes package. For
# example, this is a legal cast:
#
#   'hello'::VARCHAR(2)
#
# That expression has the effect of truncating the string to just 'he', since
# the target data type allows a maximum of two characters. This is one example
# of a "lossy" cast.
[Scalar]
define Cast {
    Input     ScalarExpr
    TargetTyp ColType
}

# Case is a CASE statement of the form:
#   CASE [ <Input> ]
#       WHEN <condval1> THEN <expr1>
#     [ WHEN <condval2> THEN <expr2> ] ...
#     [ ELSE <expr> ]
#   END
#
# The Case operator evaluates <Input> (if not provided, Input is set to True),
# then picks the WHEN branch where <condval> is equal to
# <Input>, then evaluates and returns the corresponding THEN expression. If no
# WHEN branch matches, the ELSE expression is evaluated and returned, if any.
# Otherwise, NULL is returned.
#
# Note that the Whens list inside Case is used to represent all the WHEN
# branches as well as the ELSE statement if it exists. It is of the form:
# [(When <condval1> <expr1>),(When <condval2> <expr2>),...,<expr>]
[Scalar]
define Case {
    Input  ScalarExpr
    Whens  ScalarListExpr
    OrElse ScalarExpr
}

# When represents a single WHEN ... THEN ... condition inside a CASE statement.
# It is the type of each list item in Whens (except for the last item which is
# a raw expression for the ELSE statement).
[Scalar]
define When {
    Condition ScalarExpr
    Value     ScalarExpr
}

# Array is an ARRAY literal of the form ARRAY[<expr1>, <expr2>, ..., <exprN>].
[Scalar]
define Array {
    Elems ScalarListExpr
    Typ   DatumType
}

# Function invokes a builtin SQL function like CONCAT or NOW, passing the given
# arguments. The private field is a *opt.FuncOpDef struct that provides the
# name of the function as well as a pointer to the builtin overload definition.
[Scalar]
define Function {
    Args ScalarListExpr

    _ FunctionPrivate
}

[Private]
define FunctionPrivate {
	Name       string
	Typ        DatumType
	Properties FuncProps
	Overload   FuncOverload
}

[Scalar]
define Coalesce {
    Args ScalarListExpr
}

# ColumnAccess is a scalar expression that returns a column from the given
# input expression (which is assumed to be of type Tuple). Idx is the ordinal
# index of the column in Input.
[Scalar]
define ColumnAccess {
    Input ScalarExpr

    Idx TupleOrdinal
}

# UnsupportedExpr is used for interfacing with the old planner code. It can
# encapsulate a TypedExpr that is otherwise not supported by the optimizer.
[Scalar]
define UnsupportedExpr {
    Value TypedExpr
}

[Scalar, Aggregate]
define ArrayAgg {
    Input ScalarExpr
}

[Scalar, Aggregate]
define Avg {
    Input ScalarExpr
}

[Scalar, Aggregate]
define BoolAnd {
    Input ScalarExpr
}

[Scalar, Aggregate]
define BoolOr {
    Input ScalarExpr
}

[Scalar, Aggregate]
define ConcatAgg {
    Input ScalarExpr
}

[Scalar, Aggregate]
define Count {
    Input ScalarExpr
}

[Scalar, Aggregate]
define CountRows {
}

[Scalar, Aggregate]
define Max {
    Input ScalarExpr
}

[Scalar, Aggregate]
define Min {
    Input ScalarExpr
}

[Scalar, Aggregate]
define SumInt {
    Input ScalarExpr
}

[Scalar, Aggregate]
define Sum {
    Input ScalarExpr
}

[Scalar, Aggregate]
define SqrDiff {
    Input ScalarExpr
}

[Scalar, Aggregate]
define Variance {
    Input ScalarExpr
}

[Scalar, Aggregate]
define StdDev {
    Input ScalarExpr
}

[Scalar, Aggregate]
define XorAgg {
    Input ScalarExpr
}

[Scalar, Aggregate]
define JsonAgg {
    Input ScalarExpr
}

[Scalar, Aggregate]
define JsonbAgg {
    Input ScalarExpr
}

# ConstAgg is used in the special case when the value of a column is known to be
# constant within a grouping set; it returns that value. If there are no rows
# in the grouping set, then ConstAgg returns NULL.
#
# ConstAgg is not part of SQL, but it's used internally to rewrite correlated
# subqueries into an efficient and convenient form.
[Scalar, Aggregate]
define ConstAgg {
    Input ScalarExpr
}

# ConstNotNullAgg is used in the special case when the value of a column is
# known to be constant within a grouping set, except on some rows where it can
# have a NULL value; it returns the non-NULL constant value. If there are no
# rows in the grouping set, or all rows have a NULL value, then ConstNotNullAgg
# returns NULL.
#
# ConstNotNullAgg is not part of SQL, but it's used internally to rewrite
# correlated subqueries into an efficient and convenient form.
[Scalar, Aggregate]
define ConstNotNullAgg {
    Input ScalarExpr
}

# AnyNotNullAgg returns any non-NULL value it receives, with no other guarantees.
# If it does not receive any values, it returns NULL.
#
# AnyNotNullAgg is not part of SQL, but it's used internally to rewrite
# correlated subqueries into an efficient and convenient form.
[Scalar, Aggregate]
define AnyNotNullAgg {
    Input ScalarExpr
}

# FirstAgg is used only by DistinctOn; it returns the value on the first row
# according to an ordering; if the ordering is unspecified (or partially
# specified), it is an arbitrary ordering but it must be the same across all
# FirstAggs in a DistinctOn.
[Scalar, Aggregate]
define FirstAgg {
    Input ScalarExpr
}

# AggDistinct is used as a modifier that wraps the input of an aggregate
# function. It causes the respective aggregation to only process each distinct
# value once.
[Scalar]
define AggDistinct {
    Input ScalarExpr
}

[Scalar, List]
define ScalarList {
}

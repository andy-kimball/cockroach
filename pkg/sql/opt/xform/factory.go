// Copyright 2018 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.

package xform

import (
	"fmt"

	"github.com/cockroachdb/cockroach/pkg/sql/opt/opt"
	"github.com/cockroachdb/cockroach/pkg/sql/optbase"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/builtins"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/types"
)

//go:generate optgen -out factory.og.go factory ../ops/scalar.opt ../ops/relational.opt ../ops/enforcer.opt rules/bool.opt rules/comp.opt

// Factory constructs a normalized expression tree within the memo. As each
// kind of expression is constructed by the factory, it transitively runs
// normalization transformations defined for that expression type. This may
// result in the construction of a different type of expression than what was
// requested. If, after normalization, the expression is already part of the
// memo, then construction is a no-op. Otherwise, a new memo group is created,
// with the normalized expression as its first and only expression.
//
// Factory is largely auto-generated by optgen. The generated code can be found
// in factory.og.go. The factory.go file contains helper functions that are
// invoked by normalization patterns. While most patterns are specified in the
// optgen DSL, the factory always calls the `onConstruct` method as its last
// step, in order to allow any custom manual code to execute.
type factory struct {
	mem *memo

	// maxSteps sets the maximum number of optimization patterns that the
	// factory will apply. Once this maximum is reached, the factory will
	// construct the requested operator without applying any rewrites to it.
	// This method is useful for debugging, in order to see intermediate
	// optimization steps.
	maxSteps OptimizeSteps
}

var _ opt.Factory = &factory{}

// NewFactory returns a new Factory structure with a new, blank memo
// structure inside.
func newFactory(catalog optbase.Catalog, maxSteps OptimizeSteps) *factory {
	return &factory{mem: newMemo(catalog), maxSteps: maxSteps}
}

// Metadata returns the query-specific metadata, which includes information
// about the columns and tables used in this particular query.
func (f *factory) Metadata() *opt.Metadata {
	return f.mem.metadata
}

// InternList adds the given list of group IDs to memo storage and returns an
// ID that can be used for later lookup. If the same list was added previously,
// this method is a no-op and returns the ID of the previous value.
func (f *factory) InternList(items []opt.GroupID) opt.ListID {
	return f.mem.internList(items)
}

// InternPrivate adds the given private value to the memo and returns an ID
// that can be used for later lookup. If the same value was added previously,
// this method is a no-op and returns the ID of the previous value.
func (f *factory) InternPrivate(private interface{}) opt.PrivateID {
	return f.mem.internPrivate(private)
}

// allowOptimizations returns true if optimizations are currently enabled. Each
// individual optimization decrements the maxSteps counter. Once it reaches
// zero (or if it was zero to begin with), no further optimizations will be
// performed.
func (f *factory) allowOptimizations() bool {
	return f.maxSteps > 0
}

// reportOptimization is called when an optimization has been performed on the
// tree. It decrements the maxSteps counter. Once that reaches zero, no further
// optimizations will be performed.
func (f *factory) reportOptimization() {
	f.maxSteps--
}

// onConstruct is called as a final step by each factory construction method,
// so that any custom manual pattern matching/replacement code can be run.
func (f *factory) onConstruct(group opt.GroupID) opt.GroupID {
	return group
}

// ----------------------------------------------------------------------
//
// List functions
//   Functions that manipulate lists.
//
// ----------------------------------------------------------------------

// isSingletonList returns true if the list has exactly one element.
func (f *factory) isSingletonList(list opt.ListID) bool {
	return len(f.mem.lookupList(list)) == 1
}

// firstListItem returns the first element from a list.
func (f *factory) firstListItem(list opt.ListID) opt.GroupID {
	return f.mem.lookupList(list)[0]
}

// ----------------------------------------------------------------------
//
// Boolean Rules
//   Custom match and replace functions used with bool.opt rules.
//
// ----------------------------------------------------------------------

// flattenAnd constructs an And operator from the list of input conditions.
// If any of the conditions is itself an And operator, then "flatten" it by
// merging its conditions into the top-level list. Only one level of flattening
// is necessary, since this pattern would have already matched any And operator
// children.
func (f *factory) flattenAnd(conditions opt.ListID) opt.GroupID {
	list := make([]opt.GroupID, 0, conditions.Length+1)
	for _, item := range f.mem.lookupList(conditions) {
		and := f.mem.lookupNormExpr(item).asAnd()
		if and != nil {
			list = append(list, f.mem.lookupList(and.conditions())...)
		} else {
			list = append(list, item)
		}
	}
	return f.ConstructAnd(f.mem.internList(list))
}

// flattenOr constructs an Or operator from the list of input conditions. If
// any of the conditions is itself an Or operator, then "flatten" it by merging
// its conditions into the top-level list. Only one level of flattening is
// necessary, since this pattern would have already matched any Or operator
// children.
func (f *factory) flattenOr(conditions opt.ListID) opt.GroupID {
	list := make([]opt.GroupID, 0, conditions.Length+1)
	for _, item := range f.mem.lookupList(conditions) {
		or := f.mem.lookupNormExpr(item).asOr()
		if or != nil {
			list = append(list, f.mem.lookupList(or.conditions())...)
		} else {
			list = append(list, item)
		}
	}
	return f.ConstructOr(f.mem.internList(list))
}

// simplifyAnd removes True children from an And operator. If no children are
// left, replaces And with True.
func (f *factory) simplifyAnd(conditions opt.ListID) opt.GroupID {
	list := make([]opt.GroupID, 0, conditions.Length-1)
	for _, item := range f.mem.lookupList(conditions) {
		itemExpr := f.mem.lookupNormExpr(item)
		if itemExpr.op != opt.TrueOp {
			list = append(list, item)
		}
	}
	if len(list) == 0 {
		return f.ConstructTrue()
	}
	return f.ConstructAnd(f.mem.internList(list))
}

// simplifyOr removes False children from an Or operator. If no children are
// left, replaces Or with False.
func (f *factory) simplifyOr(conditions opt.ListID) opt.GroupID {
	list := make([]opt.GroupID, 0, conditions.Length-1)
	for _, item := range f.mem.lookupList(conditions) {
		itemExpr := f.mem.lookupNormExpr(item)
		if itemExpr.op != opt.FalseOp {
			list = append(list, item)
		}
	}
	if len(list) == 0 {
		return f.ConstructFalse()
	}
	return f.ConstructOr(f.mem.internList(list))
}

// canInvertComparison returns true if the given comparison op can be negated
// by the invertComparison function. The op must already have been verified
// to be one of the comparison ops.
func (f *factory) canInvertComparison(comparison opt.GroupID) bool {
	// Group was already verified to be a comparison op by the pattern, so just
	// exclude comparisons that can't be inverted.
	switch f.mem.lookupNormExpr(comparison).op {
	case opt.ContainsOp:
		return false
	}
	return true
}

// invertComparison negates a comparison op like:
//   a.x = 5
// to:
//   a.x <> 5
func (f *factory) invertComparison(comparison opt.GroupID) opt.GroupID {
	ev := makeExprView(f.mem, comparison, opt.MinPhysPropsID)
	left := ev.ChildGroup(0)
	right := ev.ChildGroup(1)

	switch ev.Operator() {
	case opt.EqOp:
		return f.ConstructNe(left, right)
	case opt.NeOp:
		return f.ConstructEq(left, right)
	case opt.GtOp:
		return f.ConstructLe(left, right)
	case opt.GeOp:
		return f.ConstructLt(left, right)
	case opt.LtOp:
		return f.ConstructGe(left, right)
	case opt.LeOp:
		return f.ConstructGt(left, right)
	case opt.InOp:
		return f.ConstructNotIn(left, right)
	case opt.NotInOp:
		return f.ConstructIn(left, right)
	case opt.LikeOp:
		return f.ConstructNotLike(left, right)
	case opt.NotLikeOp:
		return f.ConstructLike(left, right)
	case opt.ILikeOp:
		return f.ConstructNotILike(left, right)
	case opt.NotILikeOp:
		return f.ConstructILike(left, right)
	case opt.SimilarToOp:
		return f.ConstructNotSimilarTo(left, right)
	case opt.NotSimilarToOp:
		return f.ConstructSimilarTo(left, right)
	case opt.RegMatchOp:
		return f.ConstructNotRegMatch(left, right)
	case opt.NotRegMatchOp:
		return f.ConstructRegMatch(left, right)
	case opt.RegIMatchOp:
		return f.ConstructNotRegIMatch(left, right)
	case opt.NotRegIMatchOp:
		return f.ConstructRegIMatch(left, right)
	case opt.IsOp:
		return f.ConstructIsNot(left, right)
	case opt.IsNotOp:
		return f.ConstructIs(left, right)
	default:
		panic(fmt.Sprintf("unexpected operator: %v", ev))
	}
}

// ----------------------------------------------------------------------
//
// Comparison Rules
//   Custom match and replace functions used with comp.opt rules.
//
// ----------------------------------------------------------------------

// normalizeTupleEquality remaps the elements of two tuples compared for
// equality, like this:
//   (a, b, c) = (x, y, z)
// into this:
//   (a = x) AND (b = y) AND (c = z)
func (f *factory) normalizeTupleEquality(left, right opt.ListID) opt.GroupID {
	if left.Length != right.Length {
		panic("tuple length mismatch")
	}

	leftList := f.mem.lookupList(left)
	rightList := f.mem.lookupList(right)
	conditions := make([]opt.GroupID, left.Length)
	for i := range conditions {
		conditions[i] = f.ConstructEq(leftList[i], rightList[i])
	}
	return f.ConstructAnd(f.InternList(conditions))
}

// ----------------------------------------------------------------------
//
// Function Rules
//   Custom match and replace functions used with builtin functions.
//
// ----------------------------------------------------------------------

// lookupFunction takes a builtin function name and a list of arguments, and
// constructs a function op. This is complicated by polymorphic functions. SQL
// functions with just one overload can be resolved from the name alone. And
// almost all functions with multiple overloads can be resolved from the name
// plus the argument types. That leaves a handful of functions which can only
// be resolved with additional context. lookupFunction does not currently
// support construction of those few ambiguous functions. For example, both the
// NOW and CURRENT_TIMESTAMP functions return either a timestamp value or a
// timestamptz value depending on context, and so cannot be constructed here.
func (f *factory) lookupFunction(name string, args opt.ListID) opt.GroupID {
	overloads := builtins.Builtins[name]
	if len(overloads) == 0 {
		panic(fmt.Sprintf("could not find %s function", name))
	}

	// Allocate slice of arg types to match against.
	list := f.mem.lookupList(args)
	argTypes := make([]types.T, args.Length)
	for i := 0; i < int(args.Length); i++ {
		// Get type of each of the arguments from its group's logical properties.
		argTypes[i] = f.mem.lookupGroup(list[i]).logical.Scalar.Type
	}

	var builtin *tree.Builtin
	for i := range overloads {
		overload := &overloads[i]
		if overload.Types.Match(argTypes) {
			if builtin != nil {
				panic(fmt.Sprintf("lookup failed for function %s because it is ambiguous", name))
			}
			builtin = overload
		}
	}

	if builtin == nil {
		panic(fmt.Sprintf("could not find type for function %s", name))
	}

	typ := builtin.ReturnType(argTypes)

	def := opt.FuncDef{Name: name, Type: typ, Builtin: builtin}
	return f.ConstructFunction(args, f.mem.internPrivate(def))
}
